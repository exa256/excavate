/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Swapper,
  SwapperInterface,
} from "../../../contracts/Swapper.sol/Swapper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "FROM",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROUTER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TO",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610d8a8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ef5780639d9892cd1461010d578063edaefdb71461013d578063f2fde38b1461015b57610088565b806332fe7b261461008d5780636217bbe0146100ab5780636ea056a9146100c9578063715018a6146100e5575b600080fd5b610095610177565b6040516100a29190610679565b60405180910390f35b6100b361018f565b6040516100c09190610679565b60405180910390f35b6100e360048036038101906100de919061070a565b6101a7565b005b6100ed610241565b005b6100f7610255565b6040516101049190610679565b60405180910390f35b6101276004803603810190610122919061074a565b61027e565b604051610134919061085b565b60405180910390f35b610145610452565b6040516101529190610679565b60405180910390f35b6101756004803603810190610170919061087d565b61046a565b005b73d9e1ce17f2641f24ae83637ab66a2cca9c378b9f81565b737ceb23fd6bc0add59e62ac25578270cff1b9f61981565b6101af6104ee565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016101ea9291906108b9565b602060405180830381600087803b15801561020457600080fd5b505af1158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c919061091a565b505050565b6102496104ee565b610253600061056c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606102886104ee565b6000600267ffffffffffffffff8111156102a5576102a4610947565b5b6040519080825280602002602001820160405280156102d35781602001602082028036833780820191505090505b509050730d500b1d8e8ef31e21c99d1db9a6444d3adf1270816000815181106102ff576102fe610976565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737ceb23fd6bc0add59e62ac25578270cff1b9f6198160018151811061036257610361610976565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073d9e1ce17f2641f24ae83637ab66a2cca9c378b9f73ffffffffffffffffffffffffffffffffffffffff166338ed173986868433886040518663ffffffff1660e01b81526004016103f1959493929190610a63565b600060405180830381600087803b15801561040b57600080fd5b505af115801561041f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104489190610bfc565b9150509392505050565b730d500b1d8e8ef31e21c99d1db9a6444d3adf127081565b6104726104ee565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d990610cc8565b60405180910390fd5b6104eb8161056c565b50565b6104f6610630565b73ffffffffffffffffffffffffffffffffffffffff16610514610255565b73ffffffffffffffffffffffffffffffffffffffff161461056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190610d34565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061066382610638565b9050919050565b61067381610658565b82525050565b600060208201905061068e600083018461066a565b92915050565b6000604051905090565b600080fd5b600080fd5b6106b181610658565b81146106bc57600080fd5b50565b6000813590506106ce816106a8565b92915050565b6000819050919050565b6106e7816106d4565b81146106f257600080fd5b50565b600081359050610704816106de565b92915050565b600080604083850312156107215761072061069e565b5b600061072f858286016106bf565b9250506020610740858286016106f5565b9150509250929050565b6000806000606084860312156107635761076261069e565b5b6000610771868287016106f5565b9350506020610782868287016106f5565b9250506040610793868287016106f5565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107d2816106d4565b82525050565b60006107e483836107c9565b60208301905092915050565b6000602082019050919050565b60006108088261079d565b61081281856107a8565b935061081d836107b9565b8060005b8381101561084e57815161083588826107d8565b9750610840836107f0565b925050600181019050610821565b5085935050505092915050565b6000602082019050818103600083015261087581846107fd565b905092915050565b6000602082840312156108935761089261069e565b5b60006108a1848285016106bf565b91505092915050565b6108b3816106d4565b82525050565b60006040820190506108ce600083018561066a565b6108db60208301846108aa565b9392505050565b60008115159050919050565b6108f7816108e2565b811461090257600080fd5b50565b600081519050610914816108ee565b92915050565b6000602082840312156109305761092f61069e565b5b600061093e84828501610905565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109da81610658565b82525050565b60006109ec83836109d1565b60208301905092915050565b6000602082019050919050565b6000610a10826109a5565b610a1a81856109b0565b9350610a25836109c1565b8060005b83811015610a56578151610a3d88826109e0565b9750610a48836109f8565b925050600181019050610a29565b5085935050505092915050565b600060a082019050610a7860008301886108aa565b610a8560208301876108aa565b8181036040830152610a978186610a05565b9050610aa6606083018561066a565b610ab360808301846108aa565b9695505050505050565b600080fd5b6000601f19601f8301169050919050565b610adc82610ac2565b810181811067ffffffffffffffff82111715610afb57610afa610947565b5b80604052505050565b6000610b0e610694565b9050610b1a8282610ad3565b919050565b600067ffffffffffffffff821115610b3a57610b39610947565b5b602082029050602081019050919050565b600080fd5b600081519050610b5f816106de565b92915050565b6000610b78610b7384610b1f565b610b04565b90508083825260208201905060208402830185811115610b9b57610b9a610b4b565b5b835b81811015610bc45780610bb08882610b50565b845260208401935050602081019050610b9d565b5050509392505050565b600082601f830112610be357610be2610abd565b5b8151610bf3848260208601610b65565b91505092915050565b600060208284031215610c1257610c1161069e565b5b600082015167ffffffffffffffff811115610c3057610c2f6106a3565b5b610c3c84828501610bce565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610cb2602683610c45565b9150610cbd82610c56565b604082019050919050565b60006020820190508181036000830152610ce181610ca5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d1e602083610c45565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b905091905056fea2646970667358221220cad49f65838cf7a0ce74d40e11e69a82bd497391bdf1d87e5650eaf36d8113af64736f6c63430008090033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Swapper> {
    return super.deploy(overrides || {}) as Promise<Swapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Swapper {
    return super.attach(address) as Swapper;
  }
  override connect(signer: Signer): Swapper__factory {
    return super.connect(signer) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new utils.Interface(_abi) as SwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Swapper {
    return new Contract(address, _abi, signerOrProvider) as Swapper;
  }
}
